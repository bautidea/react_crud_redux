import { createSlice, type PayloadAction } from "@reduxjs/toolkit";
import { fetchUsers } from "../../services/fetchUsers";

// A slice is a section to manage a state for a specific use case, in this case
// this slice will manage all states for users.

// Creating interface to validate types.
export interface User {
	name: string;
	email: string;
	github: string;
}

// We have two types of user, the user as person, and the the user that we use for data storage
export type UserId = string;
export interface UserWithId extends User {
	id: UserId;
}

const DEFAULT_STATE: UserWithId[] = await fetchUsers();

// To set the initial state im using an IIFE (Immediately Invoked Function Expression), is a function
// that runs the moment it is invoked or called in the event loop.
const initialState: UserWithId[] = (() => {
	const persistedState = localStorage.getItem("__redux_state__");

	return persistedState ? JSON.parse(persistedState).users : DEFAULT_STATE;
})();

// All Slices needs three things, a name to be called, its initial state, and the reducers.
export const usersSlice = createSlice({
	name: "users",
	initialState: initialState,
	reducers: {
		addNewUser: (state, action: PayloadAction<User>) => {
			// We have to generate the id in order to create a new user first.
			// This should be generated by the Data Base but in generating a random id
			const id = crypto.randomUUID();

			// action.payload  = { name, email, github }
			return [...state, { id, ...action.payload }];
		},
		deleteUserById: (state, action: PayloadAction<UserId>) => {
			console.log(action);

			const idToRemove = action.payload;
			return state.filter((user) => user.id !== idToRemove);
		},
	},
});

// Here im exporting as default only the reducer, because it is the main item i need form a slice.
// By using default export im making the import statement concise and clear.
export default usersSlice.reducer;

// The best thing to do when you have a reducer is to export the action, Redux Toolkit allows this in an
// easy way.
export const { addNewUser, deleteUserById } = usersSlice.actions;
